{
  "version": "0.2.0",
  "configurations": [
    

    {
      "name": "C/C++ Runner: Debug Session",//运行和调试任务的名称，可自定义
      "type": "cppdbg",//配置类型，默认即可
      "request": "launch",//launch模式允许我们打断点进行调试，默认即可 attach附加。即附加到正在运行的进程https://docs.microsoft.com/zh-cn/visualstudio/debugger/attach-to-running-processes-with-the-visual-studio-debugger?view=vs-2022
      // "program": "${fileDirname}/hello", //（常用）程序目录，这里相当于在命令行执行"hello"
      "args": [],//（常用）程序(main函数)的入口参数
      "stopAtEntry": false,//在入口处暂停，选true相当于在入口处增加断点
      // "environment": [],          //添加到程序的环境变量
      "externalConsole": false,//外部控制台，true在调试时会开启系统控制台窗口，false会使用vscode自带的调试控制台
      "cwd": "d:/C/nuo/src",/*在vscode中，子文件夹内的文件的相对路径的基准不再是该文件所在路径，
      而是用vscode打开的根目录作为整个项目的相对路径的基准。 
      项目中所有文件的相对路径都是指项目根目录。
       VSC默认使用 项目文件夹根目录 作为工作目录 (cwd),
       这会使得 子文件夹中的程序无法使用相对路径.*/
      "program": "d:/C/nuo/build/Debug/outDebug",
      "MIMode": "gdb",//使用gdb调试器进行调试
      "miDebuggerPath": "gdb",//debug调试工具的路径，这里使用gdb所在的路径
      "setupCommands": [//用来设置gdb的参数，默认即可
        {
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        }
      ]
      // "preLaunchTask": "环境配置测试",    //（常用）运行和调试前要执行的task(编译)任务，任务名要和task.json里的"label"对应
    }
  ]
}